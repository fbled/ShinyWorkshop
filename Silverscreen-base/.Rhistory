Server = "fwc-spdb2",
Database = "CoralGenetics/CoralGenetics",
UID = "CoralgenAdmin",
PWD = "CG@dm!n1",
Port = 1433)
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "fwc-spdb2",
Database = "CoralGenetics/genetics",
UID = "CoralgenAdmin",
PWD = "CG@dm!n1",
Port = 1433)
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/connect sql database posit.R')
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "fwc-spdb2",
Database = "CoralGenetics",
UID = "CoralgenAdmin",
PWD = "CG@dm!n1",
Port = 1433)
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/connect sql database posit.R')
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/sql-test')
con <- dbConnect(odbc(),
Driver = "{ODBC Driver 17 for SQL Server}" ,
Server = "fwc-spdb2",
Database = "CoralGenetics",
UID = "CoralgenAdmin",
PWD = "CG@dm!n1",
Port = 1433)
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "fwc-spdb2",
Database = "CoralGenetics",
UID = "CoralgenAdmin",
PWD = "CG@dm!n1",
Port = 1433)
con <- dbConnect(odbc(),
Driver ="ODBC Driver 17 for SQL Server",
#Driver = "SQL Server",
Server = "fwc-spdb2",
Database = "CoralGenetics",
UID = "CoralgenAdmin",
PWD = "CG@dm!n1",
Port = 1433)
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/sql-test')
con <- dbConnect(odbc(),
Driver ="ODBC Driver 17 for SQL Server",
#Driver = "SQL Server",
Server = "fwc-spdb2",
Database = "CoralGenetics",
UID = "CoralgenAdmin",
PWD = "CG@dm!n1",
Port = 1433)
shiny::runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/test apps/WHOML')
library(shiny)
library(shinyWidgets)
library(shinyBS)
#library(raster)
library(data.table)
library(leaflet)
#library(plyr)
library(lubridate)
#library(gdalUtils)
#library(geojsonio)
library(DT)
#library(leafem)
#library(jsonlite)
#library(RCurl)
#library(httr)
#library(fst)
library(plotly)
#library(tippy)
library(shinyjs)
library(shinyjqui)
library(shinyjqui)
#library(sf)
library(waiter)
library(highcharter)
library(highcharter)
library(chorddiag)
library(chorddiag)
library(shiny)
library(shinyWidgets)
library(shinyBS)
#library(raster)
library(data.table)
library(leaflet)
#library(plyr)
library(lubridate)
#library(gdalUtils)
#library(geojsonio)
library(DT)
#library(leafem)
#library(jsonlite)
#library(RCurl)
#library(httr)
#library(fst)
library(plotly)
#library(tippy)
library(shinyjs)
library(shinyjqui)
#library(sf)
library(waiter)
library(highcharter)
library(chorddiag)
## !!!! There is an issue with jquery on the updated shiny package 1.4.0.  This option has to be run to have the old jquery
options(shiny.jquery.version = 3)
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/test apps/WHOML')
# /!\ Added by Flo
library(leaflet.extras)
# /!\ Added by Flo
library(leaflet.extras)
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/test apps/WHOML')
library(leaflet.extras2)
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/test apps/WHOML')
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/test apps/WHOML')
library(shiny)
library(shinyWidgets)
library(shinyBS)
library(raster)
library(data.table)
library(leaflet)
library(leaflet.extras)
library(leaflet.extras2)
library(plyr)
library(sp)
library(lubridate)
library(rgdal)
library(geosphere)
#library(gdalUtils)
library(geojsonio)
library(DT)
library(leafem)
library(stars)
library(jsonlite)
library(RCurl)
library(httr)
library(rvest)
library(fst)
library(plotly)
#library(tippy)
#library(shinyjs)
#library(shinyjqui)
library(sf)
library(waiter)
library(randomcoloR)
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/test apps/WHOML')
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/connect sql database posit.R')
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/connect sql database posit.R')
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/sql-test')
runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/sql-test')
con
library(odbc)
con <- dbConnect(odbc(),
# Driver ="ODBC Driver 17 for SQL Server",  # For deployment, substitute for appropriate driver available on server
Driver = "SQL Server",
Server = "fwc-spdb2",
Database = "CoralGenetics",
UID = "CoralgenAdmin",
PWD =  "{CG@dm!n1}",
Port = 1433
)
con
src_dbi(con)
shiny::runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/IMDB')
shiny::runApp('C:/Users/Florent.Bled/Work/FWC/POSIT-Shiny - Lauren Gentry/IMDB/Silverscreen')
theme <- bs_global_get()
library(shiny)
library(ggplot2)
library(thematic)
theme <- bs_global_get()
library(bslib)
theme <- bs_global_get()
a
# In order for auto/custom fonts to work properly, you'll want
# either the ragg (or showtext) package installed
library(ragg)
# If you want `{ragg}` to handle the font rendering in a Shiny app
options(shiny.useragg = TRUE)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen/app-advanced.R')
a
# In order for auto/custom fonts to work properly, you'll want
# either the ragg (or showtext) package installed
library(ragg)
# If you want `{ragg}` to handle the font rendering in a Shiny app
options(shiny.useragg = TRUE)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
bs_global_clear()
a
# In order for auto/custom fonts to work properly, you'll want
# either the ragg (or showtext) package installed
library(ragg)
# If you want `{ragg}` to handle the font rendering in a Shiny app
options(shiny.useragg = TRUE)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
bs_global_set(theme)
a
# In order for auto/custom fonts to work properly, you'll want
# either the ragg (or showtext) package installed
library(ragg)
# If you want `{ragg}` to handle the font rendering in a Shiny app
options(shiny.useragg = TRUE)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
a
a
a
# In order for auto/custom fonts to work properly, you'll want
# either the ragg (or showtext) package installed
library(ragg)
# If you want `{ragg}` to handle the font rendering in a Shiny app
options(shiny.useragg = TRUE)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
library(shiny)
library(ggplot2)
library(thematic)
# In order for auto/custom fonts to work properly, you'll want
# either the ragg (or showtext) package installed
library(ragg)
# If you want `{ragg}` to handle the font rendering in a Shiny app
options(shiny.useragg = TRUE)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
library(bslib)
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
#shinyApp(ui, server)
run_with_themer(shinyApp(ui, server))
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
library(shiny)
library(ggplot2)
library(thematic)
# In order for auto/custom fonts to work properly, you'll want
# either the ragg (or showtext) package installed
library(ragg)
library(bslib)
# If you want `{ragg}` to handle the font rendering in a Shiny app
options(shiny.useragg = TRUE)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
#shinyApp(ui, server)
run_with_themer(shinyApp(ui, server))
shiny::runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
movie.theme
movie.theme <- bs_theme(
# Controls the default grayscale palette
bg = "#404040", fg = "#DDD3B9",
# Controls the accent (e.g., hyperlink, button, etc) colors
primary = "#B7473C", secondary = "#940490",
#  base_font = c("Grandstander", "sans-serif"),
base_font = c("Myriad Pro", "sans-serif"),
code_font = c("Courier", "monospace"),
heading_font = font_collection(font_google("Abril Fatface"), "Roboto", "sans-serif")
)
movie.theme
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
movie.theme.2
# Can also add lower-level customization
movie.theme.2 <- bs_add_variables(
movie.theme,
"input-border-color" = "#E3EFEF" ,
# "h4-rec-font" = "Myriad Pro",
# "a-rec-font" = "Myriad Pro",
# "rec-font" = "Myriad Pro",
"btn-color" = "#FFFFFF"
)
movie.theme.2
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
?sym
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
?? shiny
shinyWidgets::shinyWidgetsGallery()
library(shinyWidgets)
shinyWidgets::shinyWidgetsGallery()
library(shinydashboard)
shinyWidgetsGallery()
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Survival analysis - Mike Tringali/Clotho')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen')
shiny::runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen-full')
runApp('C:/Users/Florent.Bled/Work/FWC/Workshops/ShinyWorkshop/Silverscreen')
